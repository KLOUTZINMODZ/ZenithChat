require('dotenv').config();
const mongoose = require('mongoose');
const User = require('./src/models/User');

async function updateUserFields() {
  try {
    console.log('üîó Conectando ao MongoDB...');
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ Conectado ao MongoDB');

    console.log('üîÑ Atualizando campos de usu√°rios...');
    
    // Atualiza todos os usu√°rios que n√£o t√™m os novos campos
    const result = await User.updateMany(
      {
        $or: [
          { rating: { $exists: false } },
          { totalBoosts: { $exists: false } },
          { completedBoosts: { $exists: false } },
          { totalOrders: { $exists: false } },
          { isVerified: { $exists: false } }
        ]
      },
      {
        $set: {
          rating: 0,
          totalBoosts: 0,
          completedBoosts: 0,
          totalOrders: 0,
          isVerified: false
        }
      }
    );

    console.log(`‚úÖ ${result.modifiedCount} usu√°rios atualizados com os novos campos`);
    console.log(`‚ÑπÔ∏è  ${result.matchedCount} usu√°rios encontrados no total`);

    // Busca alguns usu√°rios para verificar
    const sampleUsers = await User.find({}).limit(5).select('name rating totalBoosts completedBoosts totalOrders isVerified');
    console.log('\nüìä Amostra de usu√°rios atualizados:');
    sampleUsers.forEach(user => {
      console.log(`- ${user.name}: rating=${user.rating}, totalBoosts=${user.totalBoosts}, completedBoosts=${user.completedBoosts}, totalOrders=${user.totalOrders}, isVerified=${user.isVerified}`);
    });

    console.log('\n‚úÖ Atualiza√ß√£o conclu√≠da com sucesso!');
    process.exit(0);
  } catch (error) {
    console.error('‚ùå Erro ao atualizar campos:', error);
    process.exit(1);
  }
}

updateUserFields();
