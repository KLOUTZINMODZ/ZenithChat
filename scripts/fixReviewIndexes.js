require('dotenv').config();
const mongoose = require('mongoose');

/**
 * Script para corrigir os √≠ndices da cole√ß√£o reviews
 * Remove √≠ndices antigos problem√°ticos e cria novos √≠ndices sparse
 */

async function fixReviewIndexes() {
  try {
    console.log('üîß Corrigindo √≠ndices da cole√ß√£o reviews...\n');

    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ Conectado ao MongoDB\n');

    const db = mongoose.connection.db;
    const reviewsCollection = db.collection('reviews');

    // Listar √≠ndices atuais
    console.log('üìã √çndices atuais:');
    const currentIndexes = await reviewsCollection.indexes();
    currentIndexes.forEach(idx => {
      console.log(`  - ${idx.name}:`, idx.key);
    });
    console.log();

    // Remover √≠ndice problem√°tico purchaseId_1 se existir
    try {
      await reviewsCollection.dropIndex('purchaseId_1');
      console.log('üóëÔ∏è  Removido √≠ndice antigo: purchaseId_1');
    } catch (err) {
      if (err.code === 27) {
        console.log('‚ÑπÔ∏è  √çndice purchaseId_1 n√£o existe (ok)');
      } else {
        console.warn('‚ö†Ô∏è  Erro ao remover purchaseId_1:', err.message);
      }
    }

    // Remover √≠ndice agreementId_1 se existir
    try {
      await reviewsCollection.dropIndex('agreementId_1');
      console.log('üóëÔ∏è  Removido √≠ndice antigo: agreementId_1');
    } catch (err) {
      if (err.code === 27) {
        console.log('‚ÑπÔ∏è  √çndice agreementId_1 n√£o existe (ok)');
      } else {
        console.warn('‚ö†Ô∏è  Erro ao remover agreementId_1:', err.message);
      }
    }

    console.log();

    // Criar novos √≠ndices sparse
    console.log('üî® Criando novos √≠ndices sparse...');
    
    try {
      await reviewsCollection.createIndex(
        { purchaseId: 1 }, 
        { sparse: true, unique: true, name: 'purchaseId_1_sparse' }
      );
      console.log('‚úÖ Criado √≠ndice: purchaseId_1_sparse (sparse + unique)');
    } catch (err) {
      console.warn('‚ö†Ô∏è  Erro ao criar purchaseId_1_sparse:', err.message);
    }

    try {
      await reviewsCollection.createIndex(
        { agreementId: 1 }, 
        { sparse: true, unique: true, name: 'agreementId_1_sparse' }
      );
      console.log('‚úÖ Criado √≠ndice: agreementId_1_sparse (sparse + unique)');
    } catch (err) {
      console.warn('‚ö†Ô∏è  Erro ao criar agreementId_1_sparse:', err.message);
    }

    console.log();

    // Listar √≠ndices finais
    console.log('üìã √çndices ap√≥s corre√ß√£o:');
    const finalIndexes = await reviewsCollection.indexes();
    finalIndexes.forEach(idx => {
      console.log(`  - ${idx.name}:`, idx.key, idx.sparse ? '(sparse)' : '', idx.unique ? '(unique)' : '');
    });

    console.log('\n‚úÖ Corre√ß√£o de √≠ndices conclu√≠da com sucesso!');

  } catch (error) {
    console.error('‚ùå Erro na corre√ß√£o de √≠ndices:', error);
  } finally {
    await mongoose.connection.close();
    console.log('\nüîå Conex√£o com MongoDB fechada');
    process.exit(0);
  }
}

fixReviewIndexes();
