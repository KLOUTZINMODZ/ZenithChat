/**
 * Script para testar o incremento de boosts ao completar agreement
 */

const mongoose = require('mongoose');
require('dotenv').config();

async function testAgreementIncrement() {
  try {
    console.log('üîÑ Conectando ao MongoDB...');
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ Conectado ao MongoDB');
    console.log('üìä Database:', mongoose.connection.db.databaseName);
    
    const Agreement = require('./src/models/Agreement');
    const User = require('./src/models/User');
    
    // Buscar o agreement mais recente completado
    console.log('\nüîç Buscando √∫ltimo agreement completado...\n');
    
    const latestAgreement = await Agreement.findOne({ status: 'completed' })
      .sort({ completedAt: -1 });
    
    if (!latestAgreement) {
      console.log('‚ùå Nenhum agreement completado encontrado!');
      process.exit(1);
    }
    
    console.log(`‚úÖ Agreement encontrado: ${latestAgreement.agreementId}`);
    console.log(`   Booster ID: ${latestAgreement.parties.booster.userid}`);
    console.log(`   Booster Name: ${latestAgreement.parties.booster.name}`);
    console.log(`   Completado em: ${latestAgreement.completedAt}`);
    console.log('');
    
    const boosterId = latestAgreement.parties.booster.userid;
    
    // Verificar o booster antes
    console.log('üîç Verificando booster ANTES do teste:\n');
    const boosterBefore = await User.findById(boosterId);
    
    if (!boosterBefore) {
      console.log(`‚ùå Booster n√£o encontrado com ID: ${boosterId}`);
      process.exit(1);
    }
    
    console.log(`   - Nome: ${boosterBefore.name}`);
    console.log(`   - totalBoosts: ${boosterBefore.totalBoosts}`);
    console.log(`   - completedBoosts: ${boosterBefore.completedBoosts}`);
    console.log('');
    
    // Simular exatamente o que o c√≥digo faz
    console.log('üß™ SIMULANDO O C√ìDIGO DE INCREMENTO...\n');
    
    console.log(`üîç Tentando incrementar boosts para booster: ${boosterId}`);
    console.log(`üîç Tipo do boosterId: ${typeof boosterId}`);
    console.log('');
    
    try {
      const updateResult = await User.findByIdAndUpdate(
        boosterId,
        {
          $inc: { 
            completedBoosts: 1,
            totalBoosts: 1
          }
        },
        { new: true, runValidators: false }
      );
      
      if (updateResult) {
        console.log(`‚úÖ Incremento bem-sucedido!`);
        console.log(`   - User: ${updateResult.name}`);
        console.log(`   - New totalBoosts: ${updateResult.totalBoosts}`);
        console.log(`   - New completedBoosts: ${updateResult.completedBoosts}`);
      } else {
        console.log(`‚ùå findByIdAndUpdate retornou null!`);
        console.log(`   Isso significa que o ID n√£o foi encontrado.`);
        console.log(`   ID usado: ${boosterId}`);
        console.log(`   Tipo: ${typeof boosterId}`);
      }
    } catch (error) {
      console.error(`‚ùå Erro ao incrementar:`);
      console.error(`   Message: ${error.message}`);
      console.error(`   Stack: ${error.stack}`);
    }
    
    console.log('\nüîç Verificando booster DEPOIS do teste:\n');
    const boosterAfter = await User.findById(boosterId);
    
    if (boosterAfter) {
      console.log(`   - Nome: ${boosterAfter.name}`);
      console.log(`   - totalBoosts: ${boosterAfter.totalBoosts}`);
      console.log(`   - completedBoosts: ${boosterAfter.completedBoosts}`);
    }
    
    // Comparar
    console.log('\nüìä COMPARA√á√ÉO:\n');
    console.log(`   Antes:  totalBoosts=${boosterBefore.totalBoosts}, completedBoosts=${boosterBefore.completedBoosts}`);
    console.log(`   Depois: totalBoosts=${boosterAfter.totalBoosts}, completedBoosts=${boosterAfter.completedBoosts}`);
    
    if (boosterAfter.totalBoosts > boosterBefore.totalBoosts) {
      console.log('\n‚úÖ SUCESSO: O incremento funcionou!');
      console.log('üí° O problema deve estar no deploy ou no fluxo de execu√ß√£o em produ√ß√£o.\n');
      
      // Reverter
      console.log('üîÑ Revertendo o incremento de teste...');
      await User.findByIdAndUpdate(
        boosterId,
        {
          $inc: { 
            completedBoosts: -1,
            totalBoosts: -1
          }
        }
      );
      console.log('‚úÖ Revertido!');
    } else {
      console.log('\n‚ùå FALHA: O incremento N√ÉO funcionou!');
      console.log('üí° H√° um problema no c√≥digo ou no modelo.\n');
    }
    
    console.log('\n‚úÖ Teste conclu√≠do!');
    process.exit(0);

  } catch (error) {
    console.error('‚ùå Erro:', error);
    process.exit(1);
  }
}

testAgreementIncrement();
