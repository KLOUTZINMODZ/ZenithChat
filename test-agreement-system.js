const axios = require('axios');


const BASE_URL = 'http://zenith.enrelyugi.com.br/api';
const TEST_JWT = 'your_test_jwt_token_here';

class AgreementSystemTest {
  constructor() {
    this.conversationId = '675b6e7a2e5f8d001f123457';
    this.firstAgreementId = null;
    this.secondAgreementId = null;
    this.clientUserId = '675a1b2c3d4e5f6789abcdef';
    this.boosterUserId = '675a1b2c3d4e5f6789abcde0';
  }

  async setup() {
    console.log('üöÄ Iniciando teste do sistema Agreement (m√∫ltiplas propostas)...\n');
  }


  async testCreateFirstProposal() {
    console.log('üìù Teste 1: Criar primeira proposta aceita');
    
    try {
      const proposalData = {
        conversationId: this.conversationId,
        proposalId: 'prop_123_first',
        proposalData: {
          game: 'League of Legends',
          category: 'Elo Boost',
          currentRank: 'Gold III',
          desiredRank: 'Platinum I',
          description: 'Boost at√© Platinum com duo queue',
          price: 150,
          estimatedTime: '3 dias'
        },
        clientData: {
          userid: this.clientUserId,
          name: 'Cliente Teste',
          email: 'cliente@test.com',
          avatar: 'avatar1.jpg',
          isVerified: true,
          totalOrders: 5,
          rating: 4.5
        },
        boosterData: {
          userid: this.boosterUserId,
          name: 'Booster Teste',
          email: 'booster@test.com',
          avatar: 'avatar2.jpg',
          isVerified: true,
          rating: 4.8,
          totalBoosts: 50,
          completedBoosts: 48
        }
      };

      const response = await axios.post(`${BASE_URL}/boosting-chat/proposal/save`, proposalData, {
        headers: {
          'Authorization': `Bearer ${TEST_JWT}`,
          'Content-Type': 'application/json',
          'X-Idempotency-Key': `first_proposal_${Date.now()}`
        }
      });

      if (response.data.success) {
        console.log('‚úÖ Primeira proposta criada com sucesso');
        console.log(`üìÑ AcceptedProposal ID: ${response.data.proposalId}`);
        console.log(`üìã Agreement ID: ${response.data.agreementId}`);
        this.firstAgreementId = response.data.agreementId;
      } else {
        console.log('‚ùå Falha ao criar primeira proposta:', response.data.message);
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Erro ao criar primeira proposta:', error.response?.data?.message || error.message);
    }
    console.log('');
  }


  async testCreateSecondProposal() {
    console.log('üìù Teste 2: Criar segunda proposta do MESMO booster');
    
    try {
      const proposalData = {
        conversationId: this.conversationId,
        proposalId: 'prop_123_second',
        proposalData: {
          game: 'League of Legends',
          category: 'Coaching',
          description: 'Coaching personalizado para melhorar gameplay',
          price: 80,
          estimatedTime: '2 horas'
        },
        clientData: {
          userid: this.clientUserId,
          name: 'Cliente Teste',
          email: 'cliente@test.com'
        },
        boosterData: {
          userid: this.boosterUserId,
          name: 'Booster Teste',
          email: 'booster@test.com'
        }
      };

      const response = await axios.post(`${BASE_URL}/boosting-chat/proposal/save`, proposalData, {
        headers: {
          'Authorization': `Bearer ${TEST_JWT}`,
          'Content-Type': 'application/json',
          'X-Idempotency-Key': `second_proposal_${Date.now()}`
        }
      });

      if (response.data.success) {
        console.log('‚úÖ Segunda proposta criada com sucesso (m√∫ltiplas propostas permitidas!)');
        console.log(`üìã Agreement ID: ${response.data.agreementId}`);
        console.log(`üîÑ √â m√∫ltipla: ${response.data.isMultiple ? 'SIM' : 'N√ÉO'}`);
        this.secondAgreementId = response.data.agreementId;
      } else {
        console.log('‚ùå Falha ao criar segunda proposta:', response.data.message);
      }
    } catch (error) {
      if (error.response?.status === 409) {
        console.log('‚ùå PROBLEMA: Sistema ainda est√° bloqueando m√∫ltiplas propostas!');
        console.log('üîß Mensagem:', error.response.data.message);
      } else {
        console.log('‚ö†Ô∏è Erro ao criar segunda proposta:', error.response?.data?.message || error.message);
      }
    }
    console.log('');
  }


  async testListConversationAgreements() {
    console.log('üìã Teste 3: Listar agreements da conversa');
    
    try {
      const response = await axios.get(`${BASE_URL}/agreements/conversation/${this.conversationId}`, {
        headers: {
          'Authorization': `Bearer ${TEST_JWT}`
        }
      });

      if (response.data.success) {
        const agreements = response.data.agreements;
        console.log(`‚úÖ Encontrados ${agreements.length} agreement(s):`);
        
        agreements.forEach((agreement, index) => {
          console.log(`  ${index + 1}. Agreement: ${agreement.agreementId}`);
          console.log(`     Status: ${agreement.status}`);
          console.log(`     Pre√ßo: R$ ${agreement.proposalSnapshot.price}`);
          console.log(`     Categoria: ${agreement.proposalSnapshot.category}`);
        });
      } else {
        console.log('‚ùå Falha ao listar agreements:', response.data.message);
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Erro ao listar agreements:', error.response?.data?.message || error.message);
    }
    console.log('');
  }


  async testCompleteFirstAgreement() {
    console.log('‚úÖ Teste 4: Completar primeiro agreement');
    
    if (!this.firstAgreementId) {
      console.log('‚ùå Erro: Primeiro agreement n√£o dispon√≠vel');
      return;
    }

    try {
      const response = await axios.post(`${BASE_URL}/agreements/${this.firstAgreementId}/complete`, {
        version: 1,
        completionNotes: 'Servi√ßo entregue com sucesso - Elo Boost conclu√≠do'
      }, {
        headers: {
          'Authorization': `Bearer ${TEST_JWT}`,
          'Content-Type': 'application/json',
          'X-Idempotency-Key': `complete_first_${Date.now()}`
        }
      });

      if (response.data.success) {
        console.log('‚úÖ Primeiro agreement completado com sucesso');
        console.log(`üìÖ Completado em: ${response.data.agreement.completedAt}`);
        console.log(`üî¢ Nova vers√£o: ${response.data.agreement.version}`);
      } else {
        console.log('‚ùå Falha ao completar primeiro agreement:', response.data.message);
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Erro ao completar primeiro agreement:', error.response?.data?.message || error.message);
    }
    console.log('');
  }


  async testSecondAgreementStillActive() {
    console.log('üîç Teste 5: Verificar independ√™ncia do segundo agreement');
    
    if (!this.secondAgreementId) {
      console.log('‚ùå Erro: Segundo agreement n√£o dispon√≠vel');
      return;
    }

    try {
      const response = await axios.get(`${BASE_URL}/agreements/${this.secondAgreementId}`, {
        headers: {
          'Authorization': `Bearer ${TEST_JWT}`
        }
      });

      if (response.data.success) {
        const agreement = response.data.agreement;
        if (agreement.status === 'active') {
          console.log('‚úÖ SUCESSO: Segundo agreement ainda ATIVO (independ√™ncia confirmada!)');
          console.log(`üìä Status: ${agreement.status}`);
          console.log(`üí∞ Pre√ßo: R$ ${agreement.proposalSnapshot.price}`);
        } else {
          console.log('‚ùå FALHA: Segundo agreement foi afetado pela finaliza√ß√£o do primeiro');
          console.log(`üìä Status incorreto: ${agreement.status}`);
        }
      } else {
        console.log('‚ùå Falha ao buscar segundo agreement:', response.data.message);
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Erro ao buscar segundo agreement:', error.response?.data?.message || error.message);
    }
    console.log('');
  }


  async testIdempotency() {
    console.log('üîÑ Teste 6: Testar idempot√™ncia em completion');
    
    if (!this.secondAgreementId) {
      console.log('‚ùå Erro: Segundo agreement n√£o dispon√≠vel');
      return;
    }

    const idempotencyKey = `idempotency_test_${Date.now()}`;
    

    try {
      const response1 = await axios.post(`${BASE_URL}/agreements/${this.secondAgreementId}/complete`, {
        version: 1,
        completionNotes: 'Coaching finalizado com sucesso'
      }, {
        headers: {
          'Authorization': `Bearer ${TEST_JWT}`,
          'Content-Type': 'application/json',
          'X-Idempotency-Key': idempotencyKey
        }
      });

      console.log('‚úÖ Primeira tentativa de completion bem-sucedida');
    } catch (error) {
      console.log('‚ö†Ô∏è Erro na primeira tentativa:', error.response?.data?.message || error.message);
      return;
    }


    try {
      const response2 = await axios.post(`${BASE_URL}/agreements/${this.secondAgreementId}/complete`, {
        version: 1,
        completionNotes: 'Tentativa duplicada'
      }, {
        headers: {
          'Authorization': `Bearer ${TEST_JWT}`,
          'Content-Type': 'application/json',
          'X-Idempotency-Key': idempotencyKey
        }
      });

      if (response2.data.message.includes('idempot√™ncia')) {
        console.log('‚úÖ Idempot√™ncia funcionando: opera√ß√£o duplicada detectada');
      } else {
        console.log('‚ö†Ô∏è Idempot√™ncia pode n√£o estar funcionando');
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Erro na segunda tentativa:', error.response?.data?.message || error.message);
    }
    console.log('');
  }


  async testAutoMigration() {
    console.log('üîÑ Teste 7: Testar migra√ß√£o autom√°tica');
    
    try {

      const response = await axios.get(`${BASE_URL}/boosting-chat/conversation/${this.conversationId}/proposal`, {
        headers: {
          'Authorization': `Bearer ${TEST_JWT}`
        }
      });

      if (response.data.success) {
        console.log('‚úÖ Migra√ß√£o autom√°tica funcionando');
        console.log(`üìÑ Proposal (legacy): ${response.data.proposal?._id ? 'Presente' : 'Ausente'}`);
        console.log(`üìã Agreement (novo): ${response.data.agreement?.agreementId ? 'Presente' : 'Ausente'}`);
        
        if (response.data.proposal && response.data.agreement) {
          console.log('‚úÖ Compatibilidade dual funcionando (ambos formatos retornados)');
        }
      } else {
        console.log('‚ùå Falha na migra√ß√£o autom√°tica:', response.data.message);
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Erro no teste de migra√ß√£o:', error.response?.data?.message || error.message);
    }
    console.log('');
  }


  async runAllTests() {
    await this.setup();
    await this.testCreateFirstProposal();
    await this.testCreateSecondProposal();
    await this.testListConversationAgreements();
    await this.testCompleteFirstAgreement();
    await this.testSecondAgreementStillActive();
    await this.testIdempotency();
    await this.testAutoMigration();
    
    console.log('üéØ Teste do sistema Agreement conclu√≠do!');
    console.log('\nüìä RESULTADOS ESPERADOS:');
    console.log('‚úÖ M√∫ltiplas propostas do mesmo booster permitidas');
    console.log('‚úÖ Finaliza√ß√£o independente de cada agreement');
    console.log('‚úÖ Idempot√™ncia funcionando');
    console.log('‚úÖ Migra√ß√£o autom√°tica transparente');
  }
}


if (require.main === module) {
  const test = new AgreementSystemTest();
  test.runAllTests().catch(console.error);
}

module.exports = AgreementSystemTest;
